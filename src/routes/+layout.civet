import type { User } from '$lib/types'

type RawUser
	id: number
	name: string
	email: string
	address: {
		city: string
		zipcode: string
	}

async function getUsers(fetch: typeof globalThis.fetch): Promise<User[]>
	try
		console.log 'Loading layout data...'
		// ðŸŒŸ Beautiful pipe operator for clean data flow
		users := 'https://jsonplaceholder.typicode.com/users'
			|> fetch
			|> await
			|> (response: Response) => 
				if not response.ok
					throw new Error("HTTP #{response.status}: #{response.statusText}")
				response
			|> .json()
			|> await
			|> .slice 0, 8 // for demo
			|> .map (rawUser: RawUser) ->
				// ðŸš€ object globs - extract only what you need
				core := rawUser.{id, name, email}
				location := rawUser.address.{city, zipcode}
				{
					...core, // ðŸš€ spread syntax
					title: if core.email.includes('biz') then 'Manager' else 'Employee'
					isActive: core.id % 3 isnt 0
					location: "#{location.city} #{location.zipcode}"
				}
		return users
	catch error
		console.error 'Failed to load users:', error
		throw error // Re-throw to be caught by #await

export load := ({ fetch }: { fetch: typeof globalThis.fetch }) ->
	{
		streamed: {
			users: getUsers(fetch)
		}
	}